[{"/Users/yashwantkhade/Projects/twitter-frontend/src/index.js":"1","/Users/yashwantkhade/Projects/twitter-frontend/src/pages/SignUp/SignUp.js":"2","/Users/yashwantkhade/Projects/twitter-frontend/src/pages/PasswordReset/PasswordReset.js":"3","/Users/yashwantkhade/Projects/twitter-frontend/src/config/typography.js":"4","/Users/yashwantkhade/Projects/twitter-frontend/src/pages/SearchText/SearchText.js":"5","/Users/yashwantkhade/Projects/twitter-frontend/src/pages/SignIn/SignIn.js":"6","/Users/yashwantkhade/Projects/twitter-frontend/src/config/shadows.js":"7","/Users/yashwantkhade/Projects/twitter-frontend/src/pages/About/index.js":"8","/Users/yashwantkhade/Projects/twitter-frontend/src/pages/Home/Home.js":"9","/Users/yashwantkhade/Projects/twitter-frontend/src/config/config.js":"10","/Users/yashwantkhade/Projects/twitter-frontend/src/config/menuItems.js":"11","/Users/yashwantkhade/Projects/test/Twitter-Search-Engine/twitter-frontend/src/index.js":"12","/Users/yashwantkhade/Projects/test/Twitter-Search-Engine/twitter-frontend/src/pages/SignIn/SignIn.js":"13","/Users/yashwantkhade/Projects/test/Twitter-Search-Engine/twitter-frontend/src/pages/SignUp/SignUp.js":"14","/Users/yashwantkhade/Projects/test/Twitter-Search-Engine/twitter-frontend/src/config/config.js":"15","/Users/yashwantkhade/Projects/test/Twitter-Search-Engine/twitter-frontend/src/pages/Home/Home.js":"16","/Users/yashwantkhade/Projects/test/Twitter-Search-Engine/twitter-frontend/src/pages/SearchText/SearchText.js":"17","/Users/yashwantkhade/Projects/test/Twitter-Search-Engine/twitter-frontend/src/pages/PasswordReset/PasswordReset.js":"18"},{"size":140,"mtime":1606464299065,"results":"19","hashOfConfig":"20"},{"size":5382,"mtime":1606464299079,"results":"21","hashOfConfig":"20"},{"size":3170,"mtime":1606464299077,"results":"22","hashOfConfig":"20"},{"size":544,"mtime":1605950800872,"results":"23","hashOfConfig":"20"},{"size":6594,"mtime":1606522813329,"results":"24","hashOfConfig":"20"},{"size":4401,"mtime":1606464299078,"results":"25","hashOfConfig":"20"},{"size":1618,"mtime":1605950800872,"results":"26","hashOfConfig":"20"},{"size":1058,"mtime":1606525102364,"results":"27","hashOfConfig":"20"},{"size":9418,"mtime":1606534530755,"results":"28","hashOfConfig":"20"},{"size":774,"mtime":1606525900999,"results":"29","hashOfConfig":"20"},{"size":4787,"mtime":1606526461206,"results":"30","hashOfConfig":"20"},{"size":140,"mtime":1606464299065,"results":"31","hashOfConfig":"32"},{"size":4401,"mtime":1606464299078,"results":"33","hashOfConfig":"32"},{"size":5382,"mtime":1606464299079,"results":"34","hashOfConfig":"32"},{"size":774,"mtime":1606599186422,"results":"35","hashOfConfig":"32"},{"size":9391,"mtime":1606599308225,"results":"36","hashOfConfig":"32"},{"size":6594,"mtime":1606522813329,"results":"37","hashOfConfig":"32"},{"size":3170,"mtime":1606464299077,"results":"38","hashOfConfig":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"16a8c26",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},"8ahin1",{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"65"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/yashwantkhade/Projects/twitter-frontend/src/index.js",[],["79","80"],"/Users/yashwantkhade/Projects/twitter-frontend/src/pages/SignUp/SignUp.js",[],"/Users/yashwantkhade/Projects/twitter-frontend/src/pages/PasswordReset/PasswordReset.js",[],["81","82"],"/Users/yashwantkhade/Projects/twitter-frontend/src/config/typography.js",["83"],"/Users/yashwantkhade/Projects/twitter-frontend/src/pages/SearchText/SearchText.js",["84","85","86","87","88","89"],"/Users/yashwantkhade/Projects/twitter-frontend/src/pages/SignIn/SignIn.js",[],"/Users/yashwantkhade/Projects/twitter-frontend/src/config/shadows.js",["90"],"/Users/yashwantkhade/Projects/twitter-frontend/src/pages/About/index.js",["91"],"/Users/yashwantkhade/Projects/twitter-frontend/src/pages/Home/Home.js",["92"],"/Users/yashwantkhade/Projects/twitter-frontend/src/config/config.js",[],"/Users/yashwantkhade/Projects/twitter-frontend/src/config/menuItems.js",[],"/Users/yashwantkhade/Projects/test/Twitter-Search-Engine/twitter-frontend/src/index.js",[],["93","94"],"/Users/yashwantkhade/Projects/test/Twitter-Search-Engine/twitter-frontend/src/pages/SignIn/SignIn.js",[],"/Users/yashwantkhade/Projects/test/Twitter-Search-Engine/twitter-frontend/src/pages/SignUp/SignUp.js",[],"/Users/yashwantkhade/Projects/test/Twitter-Search-Engine/twitter-frontend/src/config/config.js",[],"/Users/yashwantkhade/Projects/test/Twitter-Search-Engine/twitter-frontend/src/pages/Home/Home.js",[],"/Users/yashwantkhade/Projects/test/Twitter-Search-Engine/twitter-frontend/src/pages/SearchText/SearchText.js",["95","96","97","98","99","100"],"import Page from 'material-ui-shell/lib/containers/Page'\nimport React, {useCallback, useEffect, useRef, useState} from 'react'\nimport {colors, Container, Grid, makeStyles} from \"@material-ui/core\";\nimport Box from \"@material-ui/core/Box\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport {SearchRounded} from \"@material-ui/icons\";\nimport Button from \"@material-ui/core/Button\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Typography from \"@material-ui/core/Typography\";\nimport List from \"@material-ui/core/List\";\nimport {TextFieldProps} from \"@material-ui/core/TextField/TextField\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        backgroundColor: theme.palette.background.dark,\n        minHeight: '100%',\n        width: '100%',\n        paddingBottom: theme.spacing(3),\n        paddingTop: theme.spacing(3)\n    },\n    rootList: {\n        width: '100%',\n        backgroundColor: theme.palette.background.paper,\n    },\n    inline: {\n        display: 'inline',\n    },\n}));\n\nconst SearchText = (callback, deps) => {\n    const classes = useStyles();\n    const [tweetList, setTweetList] = useState([])\n    const [searchTextVal, setSearchTextVal] = useState('test')\n    const [isFetching, setIsFetching] = useState(false)\n\n    const fetchRequest = () => {\n        setIsFetching(true)\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                text: searchTextVal\n            })\n        };\n        console.log(searchTextVal)\n        fetch(\"http://127.0.0.1:5000/searchText\", requestOptions)\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                    result.data.map((item, idx) => {\n                        console.log(item.tweet.text)\n                    })\n                    setTweetList(result.data)\n                    setIsFetching(false)\n                }\n            )\n\n    };\n\n    return (\n        <Page className={classes.root}>\n\n            <Container maxWidth={false}>\n\n                <Grid container>\n                    <Box\n                        xs={9}\n                        sm={9}\n                        md={9}\n                        lg={9}\n                        xl={9}\n                        width={.75}\n                    >\n                        <TextField\n                            id=\"filled-full-width\"\n                            label=\"Search Tweet Text Here\"\n                            style={{margin: 8}}\n                            placeholder=\"\"\n                            helperText=\"\"\n                            fullWidth\n                            margin=\"normal\"\n                            value={searchTextVal}\n                            onChange={e => setSearchTextVal(e.target.value)}\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <SearchRounded/>\n                                    </InputAdornment>\n                                ),\n                            }}\n                            variant=\"filled\"\n                        />\n                    </Box>\n                    <Box\n                        xs={3}\n                        sm={3}\n                        md={3}\n                        lg={3}\n                        xl={3}\n                    >\n                        <Button variant=\"contained\" color=\"secondary\" style={{margin: 8, marginLeft: 20}}\n                                onClick={fetchRequest} disabled={isFetching}>\n                            Search\n                        </Button>\n                    </Box>\n                    <Box\n                        xs={12}\n                        sm={12}\n                        md={12}\n                        lg={12}\n                        xl={12}\n                        width={1}\n                    >\n                        <List className={classes.rootList}>\n                            {\n                                tweetList.map((item, idx) => {\n                                    return (\n                                        <div id={\"list-child-\"+idx}>\n                                            <ListItem alignItems=\"flex-start\">\n                                                <ListItemAvatar>\n                                                    <Avatar alt={item.tweet.user_screen_name}\n                                                            src=\"/static/images/avatar/1.jpg\"\n                                                    />\n                                                </ListItemAvatar>\n                                                <ListItemText\n                                                    primary={item.tweet.user_name}\n                                                    secondary={\n                                                        <React.Fragment>\n                                                            <Typography\n                                                                component=\"span\"\n                                                                variant=\"body2\"\n                                                                className={classes.inline}\n                                                                color=\"textPrimary\"\n                                                            >\n                                                                {item.tweet.text}\n                                                            </Typography>\n                                                            {\" ~ \" + item.tweet.user_screen_name}\n                                                        </React.Fragment>\n                                                    }\n                                                />\n                                            </ListItem>\n                                            <Divider variant=\"inset\" component=\"li\"/>\n                                        </div>)\n                                })\n                            }\n                        </List>\n                    </Box>\n                </Grid>\n            </Container>\n        </Page>\n    )\n}\nexport default SearchText\n","/Users/yashwantkhade/Projects/test/Twitter-Search-Engine/twitter-frontend/src/pages/PasswordReset/PasswordReset.js",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"101","replacedBy":"105"},{"ruleId":"103","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":1,"column":1,"nodeType":"109","endLine":35,"endColumn":3},{"ruleId":"110","severity":1,"message":"111","line":2,"column":16,"nodeType":"112","messageId":"113","endLine":2,"endColumn":27},{"ruleId":"110","severity":1,"message":"114","line":2,"column":29,"nodeType":"112","messageId":"113","endLine":2,"endColumn":38},{"ruleId":"110","severity":1,"message":"115","line":2,"column":40,"nodeType":"112","messageId":"113","endLine":2,"endColumn":46},{"ruleId":"110","severity":1,"message":"116","line":3,"column":9,"nodeType":"112","messageId":"113","endLine":3,"endColumn":15},{"ruleId":"110","severity":1,"message":"117","line":16,"column":9,"nodeType":"112","messageId":"113","endLine":16,"endColumn":23},{"ruleId":"118","severity":1,"message":"119","line":56,"column":49,"nodeType":"120","messageId":"121","endLine":56,"endColumn":51},{"ruleId":"107","severity":1,"message":"122","line":1,"column":1,"nodeType":"109","endLine":27,"endColumn":3},{"ruleId":"107","severity":1,"message":"123","line":8,"column":1,"nodeType":"109","endLine":38,"endColumn":2},{"ruleId":"110","severity":1,"message":"124","line":12,"column":5,"nodeType":"112","messageId":"113","endLine":12,"endColumn":25},{"ruleId":"101","replacedBy":"125"},{"ruleId":"103","replacedBy":"126"},{"ruleId":"110","severity":1,"message":"111","line":2,"column":16,"nodeType":"112","messageId":"113","endLine":2,"endColumn":27},{"ruleId":"110","severity":1,"message":"114","line":2,"column":29,"nodeType":"112","messageId":"113","endLine":2,"endColumn":38},{"ruleId":"110","severity":1,"message":"115","line":2,"column":40,"nodeType":"112","messageId":"113","endLine":2,"endColumn":46},{"ruleId":"110","severity":1,"message":"116","line":3,"column":9,"nodeType":"112","messageId":"113","endLine":3,"endColumn":15},{"ruleId":"110","severity":1,"message":"117","line":16,"column":9,"nodeType":"112","messageId":"113","endLine":16,"endColumn":23},{"ruleId":"118","severity":1,"message":"119","line":56,"column":49,"nodeType":"120","messageId":"121","endLine":56,"endColumn":51},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],["127"],["128"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useRef' is defined but never used.","'colors' is defined but never used.","'TextFieldProps' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Assign array to a variable before exporting as module default","Unexpected default export of anonymous function","'VerifiedUserOutlined' is defined but never used.",["127"],["128"],"no-global-assign","no-unsafe-negation"]